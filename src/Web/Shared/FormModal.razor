@typeparam TModel where TModel : new()

<div class="modal fade @(this.isOpen ? "show" : "")"
     id="formModal"
     tabindex="-1"
     aria-hidden="true"
     style="display: @(this.isOpen ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@this.FormTitle</h5>
                <button type="button"
                        class="btn-close" 
                        aria-label="Close"
                        @onclick="this.Close" />
            </div>
            
            <EditForm Model="this.Model"
                        Context="formContext"
                        OnValidSubmit="this.SaveAndCloseAsync">
                <div class="modal-body">
                    <DataAnnotationsValidator />

                    <!-- Caller is expected to supply form fields. -->
                    @this.ChildContent

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="this.Close">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (this.isOpen)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string FormTitle { get; set; }

    [Parameter]
    public Func<TModel, Task> AsyncSaveDelegate { get; set; }

    [Parameter]
    public Func<TModel> CreateNewModelObjectDelegate { get; set; }

    public TModel Model { get; set; } = new();

    private bool isOpen = false;

    public void Clear()
    {
        this.Model = this.CreateNewModelObjectDelegate is not null
            ? this.CreateNewModelObjectDelegate()
            : new();
    }

    public void Open(bool clearModel = true)
    {
        if (clearModel)
        {
            this.Clear();
        }

        this.isOpen = true;
        this.StateHasChanged();
    }

    public void Close()
    {
        this.isOpen = false;
        this.StateHasChanged();
    }

    private async Task SaveAndCloseAsync()
    {
        await this.AsyncSaveDelegate(this.Model);
        this.Clear();
        this.Close();
    }
}
