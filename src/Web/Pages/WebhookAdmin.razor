@page "/webhookadmin"
@using Heimdall.Models
@using Heimdall.Models.Webhooks

<h1 class="mb-4">Manage Webhooks</h1>

<AuthorizeView>
    @if (!context.User.HasDeviceAdminAccess())
    {
        <div class="alert alert-warning" role="alert">
            &#9888;&#65039; You don't have access to manage webhooks.
        </div>
    }
    else
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-9 justify-content-start">
                    <WebhookTable @ref="WebhookTable" EditUIDelegate='(webhook) => this.WebhookEditModal.Open(webhook)' />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <button class="btn btn-primary" @onclick="() => this.WebhookEditModal.Open()">+ Add</button>
                </div>
            </div>
        </div>

        <FormModal @ref="WebhookEditModal"
                   TModel="Webhook"
                   FormTitle="New Webhook"
                   OnClose='this.OnWebhookFormModalCloseAsync'
                   AsyncSaveDelegate="this.CreateOrUpdateWebhookAsync">
            <div class="form-floating row mb-4">
                <InputText id="newWebhookName"
                           class="form-control"
                           placeholder="Webhook Name"
                           @bind-Value="this.WebhookEditModal.Model.Name" />
                <label for="newDeviceName">Webhook Name</label>
                <ValidationMessage For="@(() => this.WebhookEditModal.Model.Name)" />
            </div>

            <div class="row justify-content-between mb-2">
                <div class="col-3">
                    <h5>Actions</h5>
                </div>
                <div class="dropdown col-4 text-end">
                    <button class="btn btn-primary btn-sm dropdown-toggle"
                            type="button"
                            id="newWebhookActionDropdown"
                            data-bs-toggle="dropdown"
                            aria-expanded="false">
                        + Action
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                        @foreach (var actionKind in Enum.GetValues<ActionKind>())
                        {
                            <li>
                                <button class="dropdown-item"
                                        type="button"
                                        @onclick='() => this.AddWebhookAction(actionKind)'>
                                    @(EnumUtil<ActionKind>.ToPrettyString(actionKind))
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <ValidationMessage For="@(() => this.WebhookEditModal.Model.Actions)" />
            <div class="accordion row" id="webhookActionsAccordion">
                @for (int i = 0; i < this.WebhookEditModal.Model.Actions.Count; i++)
                {
                    int currentIndex = i;
                    IAction currentAction = this.WebhookEditModal.Model.Actions[i];

                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button"
                                    type="button"
                                    id="webhookActions_toggleCollapseButton_@currentIndex"
                                    @onclick='async () => await this.BootstrapHelper.ToggleCollapseAsync(
                                        ModalCollapseGroupTag,
                                        ModalCollapseElementIdForIndex(currentIndex),
                                        $"webhookActions_toggleCollapseButton_{currentIndex}")'>
                                @(EnumUtil<ActionKind>.ToPrettyString(currentAction.ActionKind))
                            </button>
                        </h2>
                        <div id="@ModalCollapseElementIdForIndex(currentIndex)" class="accordion-collapse collapse show">
                            <div class="accordion-body">
                                <div class="row justify-content-end">
                                    <div class="col-1 mb-2">
                                        <button class="btn btn-outline-secondary btn-sm" type="button" @onclick='async () => await this.DeleteWebhookActionAsync(currentIndex)'>X</button>
                                    </div>
                                </div>

                                @if (currentAction is ToggleSwitchAction toggleSwitchAction)
                                {
                                    <div class="form-floating row mb-4">
                                        <DevicePicker id='@($"ts_action_{currentIndex}_sid")'
                                                      class="form-control"
                                                      placeholder="Choose Switch"
                                                      DeviceTypeFilter="@(new[]{ DeviceType.ShellyPlug })"
                                                      @bind-Value="toggleSwitchAction.TargetDeviceId"/>
                                        <label for="ts_action_@(currentIndex)_sid">Choose Switch</label>
                                        <ValidationMessage For="@(() => toggleSwitchAction.TargetDeviceId)" />
                                    </div>
                                }
                                else
                                {
                                    <div><strong>UI for action of type '@currentAction.GetType().Name' not implemented.</strong></div>
                                }

                            </div>
                        </div>
                    </div>
                }
            </div>
        </FormModal>
    }
</AuthorizeView>
